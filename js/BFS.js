/*
 * @Description: BFS
 * 目前超时了
 * https://leetcode-cn.com/explore/learn/card/queue-stack/217/queue-and-bfs/871/
 * @Author: TangXiaozhuo
 * @Date: 2020-03-10 23:35:28
 * @LastEditTime: 2020-03-11 01:04:27
 * @LastEditors: Tang
 */
const room = Math.pow(2, 31) - 1
const wall = -1
const door = 0
let queue = []
const input = [[0,2147483647,-1,2147483647,-1,-1,0,-1,2147483647,2147483647,2147483647,0,0,2147483647,-1,0,2147483647,-1,2147483647,2147483647,0,0,-1,0,2147483647,-1,2147483647,-1,-1,-1,2147483647,2147483647,0,2147483647,2147483647,-1,0,0,0,0,2147483647,2147483647,0,2147483647,2147483647,0],[-1,0,2147483647,-1,-1,2147483647,2147483647,2147483647,0,0,0,2147483647,0,-1,0,-1,0,-1,2147483647,0,-1,-1,2147483647,-1,2147483647,0,2147483647,2147483647,-1,-1,2147483647,0,2147483647,2147483647,0,0,0,-1,2147483647,-1,-1,2147483647,0,-1,0,0],[-1,0,0,2147483647,0,2147483647,0,2147483647,0,0,0,0,-1,2147483647,2147483647,-1,2147483647,-1,2147483647,-1,2147483647,-1,2147483647,-1,2147483647,0,0,2147483647,-1,0,-1,0,0,0,0,-1,0,-1,0,-1,2147483647,2147483647,-1,-1,2147483647,0],[0,-1,2147483647,2147483647,0,2147483647,0,2147483647,-1,2147483647,-1,2147483647,2147483647,2147483647,2147483647,-1,0,2147483647,0,-1,-1,-1,0,0,0,-1,2147483647,0,-1,2147483647,2147483647,-1,-1,0,-1,2147483647,0,2147483647,0,0,2147483647,-1,-1,2147483647,2147483647,0],[-1,-1,0,0,2147483647,2147483647,0,0,2147483647,-1,0,-1,0,0,2147483647,0,2147483647,0,2147483647,0,2147483647,2147483647,0,2147483647,-1,0,0,2147483647,0,2147483647,2147483647,2147483647,-1,2147483647,-1,2147483647,0,0,-1,2147483647,-1,0,-1,2147483647,-1,2147483647],[0,-1,2147483647,-1,0,-1,-1,2147483647,2147483647,0,2147483647,0,-1,0,2147483647,-1,2147483647,2147483647,0,-1,0,0,2147483647,-1,0,-1,2147483647,-1,2147483647,0,0,0,0,2147483647,-1,0,2147483647,2147483647,-1,2147483647,0,-1,2147483647,0,2147483647,2147483647],[0,0,0,2147483647,-1,0,2147483647,-1,2147483647,-1,-1,-1,-1,-1,-1,-1,-1,0,0,2147483647,-1,0,2147483647,0,2147483647,-1,0,-1,-1,2147483647,0,2147483647,-1,0,0,-1,0,-1,2147483647,-1,2147483647,2147483647,-1,0,0,0],[2147483647,2147483647,2147483647,0,0,2147483647,0,-1,0,-1,-1,-1,0,2147483647,-1,-1,-1,2147483647,-1,2147483647,-1,0,2147483647,-1,2147483647,0,2147483647,-1,-1,2147483647,-1,0,0,2147483647,-1,2147483647,0,0,0,2147483647,0,-1,-1,0,0,-1],[-1,0,-1,2147483647,2147483647,0,2147483647,2147483647,-1,0,-1,2147483647,0,0,-1,0,-1,-1,0,0,-1,-1,2147483647,2147483647,2147483647,0,2147483647,-1,-1,0,2147483647,-1,0,2147483647,-1,-1,0,2147483647,-1,2147483647,2147483647,0,2147483647,-1,2147483647,2147483647],[-1,2147483647,-1,2147483647,-1,2147483647,-1,-1,-1,0,-1,0,2147483647,0,0,0,-1,-1,-1,0,0,-1,-1,-1,0,-1,2147483647,2147483647,-1,0,2147483647,2147483647,2147483647,0,2147483647,-1,2147483647,0,-1,-1,2147483647,-1,2147483647,0,2147483647,-1],[0,0,2147483647,0,2147483647,2147483647,0,-1,-1,-1,0,-1,-1,-1,0,0,-1,2147483647,2147483647,0,0,0,-1,0,-1,-1,0,-1,-1,0,0,0,0,2147483647,-1,2147483647,2147483647,-1,2147483647,-1,2147483647,-1,0,0,-1,-1],[-1,2147483647,2147483647,0,0,2147483647,-1,2147483647,0,2147483647,0,0,2147483647,2147483647,0,-1,0,-1,2147483647,2147483647,-1,2147483647,-1,-1,2147483647,2147483647,0,-1,0,2147483647,0,0,2147483647,2147483647,-1,2147483647,0,-1,0,0,-1,0,0,0,-1,-1],[0,-1,2147483647,0,-1,-1,0,-1,2147483647,-1,-1,-1,-1,2147483647,-1,2147483647,2147483647,2147483647,2147483647,-1,-1,2147483647,-1,2147483647,-1,2147483647,-1,2147483647,-1,2147483647,0,2147483647,0,-1,-1,0,0,-1,0,2147483647,-1,-1,0,2147483647,0,0],[-1,-1,0,-1,2147483647,-1,0,-1,2147483647,2147483647,2147483647,-1,0,-1,-1,0,0,0,0,0,0,2147483647,0,-1,2147483647,0,0,-1,2147483647,2147483647,2147483647,2147483647,-1,0,0,0,0,-1,2147483647,0,0,0,0,-1,2147483647,-1],[2147483647,0,0,2147483647,0,2147483647,-1,0,0,2147483647,2147483647,2147483647,2147483647,2147483647,0,-1,0,-1,-1,2147483647,-1,0,-1,-1,0,2147483647,2147483647,-1,-1,2147483647,2147483647,-1,2147483647,2147483647,-1,2147483647,0,0,0,-1,-1,0,0,0,0,2147483647],[0,-1,-1,0,0,-1,-1,-1,0,0,2147483647,2147483647,2147483647,2147483647,-1,-1,0,-1,-1,-1,0,2147483647,2147483647,0,2147483647,0,0,0,0,2147483647,0,2147483647,2147483647,0,-1,2147483647,-1,-1,2147483647,2147483647,2147483647,-1,2147483647,0,-1,2147483647],[-1,-1,-1,-1,2147483647,0,0,2147483647,0,0,2147483647,0,-1,0,2147483647,0,0,2147483647,0,-1,0,0,0,0,0,-1,0,2147483647,2147483647,0,0,2147483647,0,0,2147483647,2147483647,-1,2147483647,2147483647,2147483647,0,-1,-1,0,2147483647,2147483647],[2147483647,-1,-1,0,2147483647,-1,0,0,-1,-1,2147483647,0,0,-1,0,2147483647,2147483647,-1,2147483647,-1,0,2147483647,-1,-1,0,2147483647,-1,0,-1,-1,-1,-1,2147483647,-1,-1,0,-1,2147483647,-1,2147483647,-1,2147483647,0,-1,0,0],[2147483647,2147483647,-1,2147483647,-1,0,0,0,2147483647,2147483647,0,-1,-1,0,-1,2147483647,2147483647,-1,0,2147483647,2147483647,2147483647,0,0,2147483647,2147483647,0,2147483647,-1,2147483647,2147483647,0,2147483647,0,2147483647,2147483647,2147483647,0,-1,2147483647,2147483647,2147483647,2147483647,-1,-1,2147483647]]

var findNext = (i, j, length, breadth) => {
  let ar = []
  if (i-1>-1) ar.push({i:i-1,j:j})
  if (j-1>-1) ar.push({i:i, j:j-1})
  if (i+1<length) ar.push({i:i+1,j:j})
  if (j+1<breadth) ar.push({i:i,j:j+1})
  return ar
}

var BFS = (root, {length,breadth, rooms}, target = 0, dep = 0) => {
  if (!!root) queue.push(root)
  const cur = queue.shift()
  if (cur === undefined) return room
  if (cur.dep > length * breadth) return room
  if (cur.val === target) return cur.dep
  const next = findNext(cur.i,cur.j,length,breadth)
  next.forEach(item => {
      if(hash[`${item.i}${item.j}`]) return
      hash[`${item.i}${item.j}`] = true
      if(rooms[item.i][item.j] !== wall) queue.push({ dep: cur.dep + 1, val: rooms[item.i][item.j], i:item.i, j:item.j })
  })
  return BFS(null, { length,breadth,rooms }, 0, dep)
}

var wallsAndGates = function(rooms) {
  if (rooms.length === 0) return
  let length = rooms.length
  let breadth = rooms[0].length
  for(let i = 0; i < length; i++) {
      for (let j = 0; j < breadth; j++) {
          if (rooms[i][j] === door) {
            rooms[i][j] = door
          } else if (rooms[i][j] === wall) {
            rooms[i][j] = wall
          } else {
              const step = BFS({val: rooms[i][j], i, j, dep: 0}, {length,breadth, rooms})
              rooms[i][j] = step
              queue = []
              hash = {}
          }
      }
  }
};

wallsAndGates(input)